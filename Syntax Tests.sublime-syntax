%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Sublime Syntax Tests
hidden: true
scope: text.syntax-tests
variables:
  scope_segment: \w+(?:[\w-]*\+*) # \+* is for the non standard scope.c++ scopes

contexts:
  main:
    # summaries
    - match: ^(\[)Finished(\])
      scope: meta.summary.finished.syntax-tests markup.info.finished.syntax-tests
      captures:
        1: punctuation.definition.markup.begin.syntax-tests
        2: punctuation.definition.markup.end.syntax-tests
    - match: ^(FAILED)(:) (\d+) of (\d+) assertions in (\d+) files failed
      scope: meta.summary.failure.syntax-tests
      captures:
        1: markup.error.failed.syntax-tests
        2: punctuation.separator.syntax-tests
        3: constant.numeric.syntax-tests
        4: constant.numeric.syntax-tests
        5: constant.numeric.syntax-tests
    - match: ^(Success)(:) (\d+) assertions in (\d+) files passed
      scope: meta.summary.success.syntax-tests
      captures:
        1: markup.info.success.syntax-tests
        2: punctuation.separator.syntax-tests
        3: constant.numeric.syntax-tests
        4: constant.numeric.syntax-tests

    # locations
    - match: ^Packages/(..[^:]*)(:)(\d+)(:)(\d+)
      scope: meta.path.syntax-tests entity.name.section
      captures:
        2: punctuation.separator.sequence.syntax-tests
        3: constant.numeric.integer.decimal.syntax-tests
        4: punctuation.separator.sequence.syntax-tests
        5: constant.numeric.integer.decimal.syntax-tests

    # assertions
    - match: ^\s*(expect|found)(:)
      captures:
        1: keyword.other.syntax-tests
        2: punctuation.separator.syntax-tests
      push: assertion-body

  assertion-body:
    - match: \n
      pop: 1
    - match: '{{scope_segment}}'
      scope: string.unquoted.scope-segment.scope-selector
    - match: \.
      scope: punctuation.separator.scope-segments.scope-selector
